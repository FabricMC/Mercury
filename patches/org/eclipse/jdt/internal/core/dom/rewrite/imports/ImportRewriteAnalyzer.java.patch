--- a/org/eclipse/jdt/internal/core/dom/rewrite/imports/ImportRewriteAnalyzer.java
+++ b/org/eclipse/jdt/internal/core/dom/rewrite/imports/ImportRewriteAnalyzer.java
@@ -250,10 +250,10 @@
 	}
 
 	private static RewriteSite determineRewriteSite(
-			CompilationUnit compilationUnit, List<OriginalImportEntry> originalImports) throws JavaModelException {
+			CompilationUnit compilationUnit, org.eclipse.jface.text.IDocument document, List<OriginalImportEntry> originalImports) throws JavaModelException {
 		IRegion importsRegion = determineImportsRegion(originalImports);
 
-		IRegion surroundingRegion = determineSurroundingRegion(compilationUnit, importsRegion);
+		IRegion surroundingRegion = determineSurroundingRegion(compilationUnit, document, importsRegion);
 
 		boolean hasPrecedingElements = surroundingRegion.getOffset() != 0;
 
@@ -291,7 +291,7 @@
 	 * Determines the region to be occupied by imports, their associated comments, and surrounding
 	 * whitespace.
 	 */
-	private static IRegion determineSurroundingRegion(CompilationUnit compilationUnit, IRegion importsRegion) throws JavaModelException {
+	private static IRegion determineSurroundingRegion(CompilationUnit compilationUnit, org.eclipse.jface.text.IDocument document, IRegion importsRegion) throws JavaModelException {
 		NavigableMap<Integer, ASTNode> nodesTreeMap = mapTopLevelNodes(compilationUnit);
 
 		int surroundingStart;
@@ -332,12 +332,24 @@
 		}
 
 		int surroundingEnd = positionAfterImports;
+		if (document != null) {
+			try {
+				int length = document.getLength();
+				while (surroundingEnd < length && Character.isWhitespace(document.getChar(surroundingEnd))) {
+					surroundingEnd++;
+				}
+			} catch (org.eclipse.jface.text.BadLocationException e) {
+				throw new RuntimeException(e);
+			}
+		} else {
 		IBuffer buffer = compilationUnit.getTypeRoot().getBuffer();
 		int length = buffer.getLength();
 		while (surroundingEnd < length && Character.isWhitespace(buffer.getChar(surroundingEnd))) {
 			surroundingEnd++;
 		}
+		}
 
+
 		return new Region(surroundingStart, surroundingEnd - surroundingStart);
 	}
 
@@ -433,6 +445,7 @@
 	public ImportRewriteAnalyzer(
 			ICompilationUnit cu,
 			CompilationUnit astRoot,
+			org.eclipse.jface.text.IDocument document,
 			ImportRewriteConfiguration configuration) throws JavaModelException {
 		this.originalImportEntries = Collections.unmodifiableList(readOriginalImports(astRoot));
 
@@ -461,7 +474,7 @@
 
 		ImportGroupComparator importGroupComparator = new ImportGroupComparator(configuration.importOrder);
 
-		JavaProject javaProject = (JavaProject) cu.getJavaProject();
+		JavaProject javaProject = cu != null ? (JavaProject) cu.getJavaProject() : null;
 
 		this.importAdder = configuration.originalImportHandling.createImportAdder(new ImportComparator(
 				importGroupComparator,
@@ -469,31 +482,39 @@
 				configuration.staticContainerSorting.createContainerComparator(javaProject)));
 
 		this.implicitImportContainerNames =
-				configuration.implicitImportIdentification.determineImplicitImportContainers(cu);
+				configuration.implicitImportIdentification.determineImplicitImportContainers(cu, astRoot, configuration.implicitPackageName);
 
 		this.onDemandComputer = new OnDemandComputer(
 				configuration.typeOnDemandThreshold,
 				configuration.staticOnDemandThreshold);
 
+		if (cu != null) {
 		this.conflictIdentifier = new ConflictIdentifier(
 				this.onDemandComputer,
 				new TypeConflictingSimpleNameFinder(javaProject, new SearchEngine()),
 				new StaticConflictingSimpleNameFinder(javaProject),
 				this.implicitImportContainerNames);
+		} else {
+			this.conflictIdentifier = null; // TODO
+		}
 
 		this.importsByNameIdentity = mapImportsByNameIdentity(this.originalImportEntries);
 
-		this.importDeclarationWriter = new ImportDeclarationWriter(shouldInsertSpaceBeforeSemicolon(javaProject));
+		this.importDeclarationWriter = new ImportDeclarationWriter(cu != null && shouldInsertSpaceBeforeSemicolon(javaProject));
 
+		if (cu != null) {
 		this.lineDelimiter = cu.findRecommendedLineSeparator();
+		} else {
+			this.lineDelimiter = org.eclipse.jface.text.TextUtilities.getDefaultLineDelimiter(document);
+		}
 
 		this.importEditor = new ImportEditor(
 				this.lineDelimiter,
 				configuration.originalImportHandling.shouldFixAllLineDelimiters(),
-				getBlankLinesBetweenImportGroups(javaProject) + 1,
+				cu != null ? getBlankLinesBetweenImportGroups(javaProject) + 1 : 2,
 				importGroupComparator,
 				this.originalImportEntries,
-				determineRewriteSite(astRoot, this.originalImportEntries),
+				determineRewriteSite(astRoot, document, this.originalImportEntries),
 				this.importDeclarationWriter);
 	}
 
@@ -567,18 +588,18 @@
 
 		Set<ImportName> touchedContainers = determineTouchedContainers();
 
-		Conflicts conflicts = this.conflictIdentifier.identifyConflicts(
+		Conflicts conflicts = this.conflictIdentifier != null ? this.conflictIdentifier.identifyConflicts(
 				importsWithAdditionsAndRemovals,
 				touchedContainers,
 				this.typeExplicitSimpleNames,
 				this.staticExplicitSimpleNames,
-				progressMonitor);
+				progressMonitor) : null;
 
 		Set<String> allTypeExplicitSimpleNames = new HashSet<>(this.typeExplicitSimpleNames);
-		allTypeExplicitSimpleNames.addAll(conflicts.typeConflicts);
+		if (conflicts != null) allTypeExplicitSimpleNames.addAll(conflicts.typeConflicts);
 
 		Set<String> allStaticExplicitSimpleNames = new HashSet<>(this.staticExplicitSimpleNames);
-		allStaticExplicitSimpleNames.addAll(conflicts.staticConflicts);
+		if (conflicts != null) allStaticExplicitSimpleNames.addAll(conflicts.staticConflicts);
 
 		Set<ImportName> implicitImports = identifyImplicitImports(this.importsToAdd, allTypeExplicitSimpleNames);
 		List<ImportName> importsWithoutImplicits =
